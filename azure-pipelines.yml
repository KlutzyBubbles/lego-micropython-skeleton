# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev

variables:
  Branch: '$(Release.Artifacts._build.SourceBranchName)'
  BuildNumber: '$(Release.Artifacts._build.BuildNumber)'
  WorkingDirectory: '$(System.DefaultWorkingDirectory)/_build/build'

jobs:
- job: Test
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python27:
        python.version: '2.7'
      Python34:
        python.version: '3.4'
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    displayName: 'Install dependencies'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        pip install pytest pytest-azurepipelines
        pytest
    displayName: 'pytest'

- job: Build
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: Test
  steps:
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/pybricks'
      Contents: |
        *.py
        **\*.py
      TargetFolder: '$(Build.ArtifactStagingDirectory)/pybricks'
    displayName: 'Copy pybricks source'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)'
      Contents: |
        requirements.txt
        setup.py
        README.md
        LICENSE
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Copy requirements and setup'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'build'
      publishLocation: 'Container'

- deployment: Distribute
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: Test
  strategy:
    runOnce:
      deploy:
        steps:
        - task: UsePythonVersion@0
          displayName: 'Use Python 3.7'
          inputs:
            versionSpec: 3.7
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: '$(WorkingDirectory)'
            script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
          displayName: 'Install Pip & Requirements'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: '$(WorkingDirectory)'
            script: |
              pip install --user --upgrade setuptools wheel twine
          displayName: 'Install Dist Packages'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: '$(WorkingDirectory)'
            script: |
              prefix=""
              if [ "$BRANCH" == "dev" ]
              then
                prefix="dev"
              fi
              build_number=${BUILD_NUMBER//./}
              export PACKAGE_BUILD=".${prefix}${build_number}"
              python setup.py sdist bdist_wheel
              python -m twine upload dist/* --skip-existing -u $PYPI_USERNAME -p $PYPI_PASSWORD
          displayName: 'Package and build'
          env:
            BRANCH: $(Branch)
            BUILD_NUMBER: $(BuildNumber)
            PYPI_USERNAME: $(PYPI_USERNAME)
            PYPI_PASSWORD: $(PYPI_PASSWORD)
